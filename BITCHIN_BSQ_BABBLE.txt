___________________________________________________________________________________________________________________
BITCHIN BSQ BABBLIN IN ORDER TO BBQ THIS BADASS BSQ BITCH
___________________________________________________________________________________________________________________

________________________________________________________________________________
STEP 1: READ THE MAP INTO OUR PROGRAM

	- Get the information required to read the map from the first line.
		- The number of lines
		- The empty character
		- The obstacle character
		- The full character
	
	- Find the start of the map, and convert the map into a useable form (probably a 2d char array)
		- Depending on the formatting of the map, and if newline is used, will need to parse it and ensure
		  that the line numbers are used to create the proper size and shape array.

	______________________________________
	REQUIRED FUNCTIONS:
	
	- get_legend - Some kind of ATOI-like function, but to grab specifically the map "legend" information.
	- get_map - Another function to find the start and end of the map itself and read it into an array.
	- check_map - Ensure that each map is valid according to the rules. If not valid, save an error state to be 
				  printed and move on to the next map.
	- check_args - Ensure that the command line input is valid.

	______________________________________
	REQUIRED DATA STORAGE:

	-	Struct variable called "map"
		-	Contains the legend information (empty char, obstacle char, and fill char)
		-	Contains a 2d array (or array of pointers to strings) that holds the map

	________________________________________________________________________________
	STEP 2: RUN SOLVING ALGORITHM

	-	Run an iterative or recursive algorithm to find the largest solution for each map.
	-	Store the largest currently found square, overwriting whenever a new square is found

	______________________________________
	REQUIRED FUNCTIONS:

	______________________________________
	REQUIRED DATA STORAGE:

	-	Struct variable called "solution"
		-	Containts a key that identifies which map the solution belongs to
		-	Contains the X and Y coordinates of where the solution square begins
		-	Contains the side length of the solution square 

	________________________________________________________________________________

	STEP 3: PRINT ALL SOLUTIONS TO THE TERMINAL

		- Print the solution found for each map to the terminal, followed by a newline.
		- If there was a map error, display "map error" ON THE ERROR OUTPUT, followed by a newline.
		- Move on to next map after succesful print, or map error.

	______________________________________
	REQUIRED FUNCTIONS:

	-	get_solution - Function to grab the appropriate solution base on the map key ID
	-	print_solution - Function to print the proper characters to the correct map based on the map legend

	______________________________________
	REQUIRED DATA STORAGE:



	STEP 4: FREE ALL MEMORY BEFORE EXITING










___________________________________________________________________________________________________________________
TASKS
___________________________________________________________________________________________________________________

	- Create a header file that contains all necessary structs, includes, and prototypes.
	- Create a makefile that will properly compile program and clean up after (CANNOT RELINK, WHATEVER THAT MEANS).
	- Write perl script to create maps. (DONE)

	- Write parse and read functions



___________________________________________________________________________________________________________________
FUNCTION TO WRITE
___________________________________________________________________________________________________________________




___________________________________________________________________________________________________________________
NOTES ABOUT MUSTARD, KETCHUP, AND OTHER BBQ CONDIMENTS FOR BBQING THE BITCHIN BSQ
___________________________________________________________________________________________________________________